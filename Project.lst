Microsoft (R) Macro Assembler Version 14.12.25830.2	    12/06/17 02:26:45
main.asm						     Page 1 - 1


				INCLUDE ..\Irvine32.inc
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C ;OPTION CASEMAP:NONE		; optional: make identifiers case-sensitive
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .LIST
			      C 
			      C INCLUDE VirtualKeys.inc
			      C ; VirtualKeys.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C .NOLIST
			      C .LIST
			      C 

 00000000			.data

				; PONCUTATIONS
 = 0000000A			P_PURPLE = 10
 = 00000014			P_BLUE = 20
 = 0000001E			P_GREEN = 30
 = 00000032			P_YELLOW = 50
 = 00000050			P_RED = 80

				; ENUM: Bricks
 = 00000000			B_GRAY = 0
 = 00000001			B_PURPLE = 1
 = 00000002			B_BLUE = 2
 = 00000003			B_GREEN = 3
 = 00000004			B_YELLOW = 4
 = 00000005			B_RED = 5
 = 00000006			B_ANY = 6

				; Game Constants
 = 00000003			LEN_Q_LANES = 3 ; LANES NUMBER
 = 00000007			LEN_B_COLORS = B_ANY+1 ; BRICK COLORS NUMBER
 = 00000028			MAIN_TIME_STEP = 40; OUR DELAY TIME BETWEEN STEPS (miliseconds)
 = 0000000A			BLOCKED_STEPS = 10 ; STEPS THE PLAYER WILL BE BLOCKED WHEN OVERFLOWED

				; Enum: QueueElem
 = 00000000			Q_BRICK = 0 ; LANE * Brick
 = 00000015			Q_NEXT = Q_BRICK+(LEN_Q_LANES*LEN_B_COLORS) ; ADVANCE STEP
 = 00000016			Q_REPEAT_X = Q_NEXT+1 ; CREATE X EMPTY STEPS
 = 000000FF			Q_EOG = 255 ; END OF LEVEL

				; Enum: InventoryElem
 = 00000000			I_EMPTY = 0
 = 00000001			I_REMOVING = 1
 = 00000002			I_COLOR = 2

				; Enum: PerLaneQueueElem
 = 00000000			L_EMPTY = 0
 = 00000001			L_EOG = 1
 = 00000002			L_COLOR = 2

				; Enum: Scenes
 = 000000FF			MAIN_START = 255
 = 000000FE			MAIN_TITLE = 254
 = 000000FD			MAIN_INSTRUCTIONS = 253
 = 000000FE			MAIN_PONCTUATION = 254

				; GAME STATES
 00000000 FF			PLAYER_POS BYTE MAIN_START ; WHICH LANE (0..LEN_Q_LANES) OR WHICH SCENE (MAIN_START..MAIN_PONCTUATION)
 00000001 0000008B R		MAIN_Q DWORD offset LEVEL_EASY ; CURRENT LEVEL QUEUE
 00000005 00			MAIN_Q_INDEX BYTE 0	; CURRENT LEVEL QUEUE POSITION/INDEX
 00000006 00			MAIN_Q_REPEAT_COUNTER BYTE 0 ; EMPTY STEPS LEFT COUNTER
 00000007 00			PLAYER_BLOCKED_X BYTE 0 ; HOW MANY STEPS PLAYER WILL CONTINUE BLOCKED
 00000008  00000003 [		PLAYER_INVENTORY BYTE LEN_Q_LANES DUP (7 DUP (I_EMPTY)) ; IVENTORY ON EACH LANE
	    00000007 [
	     00
	    ]
	   ]
 0000001D 00000000		PLAYER_POINTS DWORD 0 ; PONCUTATION ACCUMULATOR
 00000021  00000003 [		GAME_LANES BYTE LEN_Q_LANES DUP (32 DUP (L_EOG)) ; WHAT WE HAVE QUEUED ON EACH LANE
	    00000020 [
	     01
	    ]
	   ]

				; GLYPHS
 00000081  00000003 [		GLYPH_PLAYER BYTE 3 DUP (178),254,0
	    B2
	   ] FE 00
 00000086  00000004 [		GLYPH_PLAYER_EMPTY BYTE 4 DUP (' '),0
	    20
	   ] 00
 = 000000B0			G_INV_EMPTY = 176
 = 000000DB			G_INV_NODE = 219
 = 000000AF			G_INV_SPLT = 175
 = 000000CD			G_LANE_BORDER = 205
 = 000000C4			G_LANE_SPLT = 196
 = 000000FE			G_FRAME = 254

				; LEVELS
 0000008B 35 FF			LEVEL_EASY BYTE Q_REPEAT_X+31,Q_EOG
 0000008D 35 FF			LEVEL_NORMAL BYTE Q_REPEAT_X+31,Q_EOG

				; TEXTS
 0000008F 20 20 20 20 5F	TXT_LOGO \
	   5F 5F 5F 20 20
	   20 20 20 20 20
	   20 5F 5F 20 20
	   20 20 20 20 20
	   20 20 20 5F 5F
	   5F 5F 5F 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   5F 5F 5F 5F 00
					BYTE "    ____        __          _____            ____", 0
 000000C1  20 20 20 2F 20		BYTE "   / __ )__  __/ /____     / ___/__  _______/ __/__  _____", 0
	   5F 5F 20 29 5F
	   5F 20 20 5F 5F
	   2F 20 2F 5F 5F
	   5F 5F 20 20 20
	   20 20 2F 20 5F
	   5F 5F 2F 5F 5F
	   20 20 5F 5F 5F
	   5F 5F 5F 5F 2F
	   20 5F 5F 2F 5F
	   5F 20 20 5F 5F
	   5F 5F 5F 00
 000000FC  20 20 2F 20 5F		BYTE "  / __  / / / / __/ _ \    \__ \/ / / / ___/ /_/ _ \/ ___/", 0
	   5F 20 20 2F 20
	   2F 20 2F 20 2F
	   20 5F 5F 2F 20
	   5F 20 5C 20 20
	   20 20 5C 5F 5F
	   20 5C 2F 20 2F
	   20 2F 20 2F 20
	   5F 5F 5F 2F 20
	   2F 5F 2F 20 5F
	   20 5C 2F 20 5F
	   5F 5F 2F 00
 00000137  20 2F 20 2F 5F		BYTE " / /_/ / /_/ / /_/  __/   ___/ / /_/ / /  / __/  __/ /", 0
	   2F 20 2F 20 2F
	   5F 2F 20 2F 20
	   2F 5F 2F 20 20
	   5F 5F 2F 20 20
	   20 5F 5F 5F 2F
	   20 2F 20 2F 5F
	   2F 20 2F 20 2F
	   20 20 2F 20 5F
	   5F 2F 20 20 5F
	   5F 2F 20 2F 00
 0000016E  2F 5F 5F 5F 5F		BYTE "/_____/\__, /\__/\___/   /____/\__,_/_/  /_/  \___/_/", 0
	   5F 2F 5C 5F 5F
	   2C 20 2F 5C 5F
	   5F 2F 5C 5F 5F
	   5F 2F 20 20 20
	   2F 5F 5F 5F 5F
	   2F 5C 5F 5F 2C
	   5F 2F 5F 2F 20
	   20 2F 5F 2F 20
	   20 5C 5F 5F 5F
	   2F 5F 2F 00
 000001A4  20 20 20 20 20		BYTE "      /____/", 0
	   20 2F 5F 5F 5F
	   5F 2F 00
 = 00000006			LQ_LOGO = 6

 000001B1 20 20 50 52 45	TXT_TITLE_MIDDLE \
	   53 53 20 46 31
	   20 46 4F 52 20
	   49 4E 53 54 52
	   55 43 54 49 4F
	   4E 53 21 00
					BYTE "  PRESS F1 FOR INSTRUCTIONS!",0
 000001CE  4F 52 20 43 48		BYTE "OR CHOOSE A DIFFICULTY TO PLAY:",0
	   4F 4F 53 45 20
	   41 20 44 49 46
	   46 49 43 55 4C
	   54 59 20 54 4F
	   20 50 4C 41 59
	   3A 00
 000001EE  20 20 20 20 20		BYTE "           1 - EASY",0
	   20 20 20 20 20
	   20 31 20 2D 20
	   45 41 53 59 00
 00000202  20 20 20 20 20		BYTE "          2 - NORMAL",0
	   20 20 20 20 20
	   32 20 2D 20 4E
	   4F 52 4D 41 4C
	   00
 00000217  20 20 20 20 20		BYTE "           3 - HARD",0
	   20 20 20 20 20
	   20 33 20 2D 20
	   48 41 52 44 00
 = 00000005			LQ_TITLE_MIDDLE = 5

 0000022B 43 72 65 61 74	TXT_AUTHORS \
	   65 64 20 62 79
	   3A 20 42 69 61
	   6E 63 61 20 47
	   61 72 63 69 61
	   20 4D 61 72 74
	   69 6E 73 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 4C 41
	   42 20 41 52 51
	   32 00
					BYTE "Created by: Bianca Garcia Martins                         LAB ARQ2", 0
 0000026E  20 20 20 20 20		BYTE "            Pedro Henrique Lara Campos               Prof. Luciano Neris", 0
	   20 20 20 20 20
	   20 20 50 65 64
	   72 6F 20 48 65
	   6E 72 69 71 75
	   65 20 4C 61 72
	   61 20 43 61 6D
	   70 6F 73 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 50 72
	   6F 66 2E 20 4C
	   75 63 69 61 6E
	   6F 20 4E 65 72
	   69 73 00
 000002B7  20 20 20 20 20		BYTE "            Rebecca Fernandes                              2017/2", 0
	   20 20 20 20 20
	   20 20 52 65 62
	   65 63 63 61 20
	   46 65 72 6E 61
	   6E 64 65 73 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 32
	   30 31 37 2F 32
	   00
 = 00000003			LQ_AUTHORS = 3
				
 000002F9 49 4E 53 54 52	TXT_INSTRUCTIONS \
	   55 43 54 49 4F
	   4E 53 3A 00
					BYTE "INSTRUCTIONS:", 0                                                                        
 00000307  00				BYTE 0
 00000308  20 20 50 72 65		BYTE "  Press the UP and DOWN keys to move your spaceship across the roadway.", 0            
	   73 73 20 74 68
	   65 20 55 50 20
	   61 6E 64 20 44
	   4F 57 4E 20 6B
	   65 79 73 20 74
	   6F 20 6D 6F 76
	   65 20 79 6F 75
	   72 20 73 70 61
	   63 65 73 68 69
	   70 20 61 63 72
	   6F 73 73 20 74
	   68 65 20 72 6F
	   61 64 77 61 79
	   2E 00
 00000350  00				BYTE 0                                                                                     
 00000351  20 20 45 61 72		BYTE "  Earn points collecting bricks forming clusters of the same colors.", 0                
	   6E 20 70 6F 69
	   6E 74 73 20 63
	   6F 6C 6C 65 63
	   74 69 6E 67 20
	   62 72 69 63 6B
	   73 20 66 6F 72
	   6D 69 6E 67 20
	   63 6C 75 73 74
	   65 72 73 20 6F
	   66 20 74 68 65
	   20 73 61 6D 65
	   20 63 6F 6C 6F
	   72 73 2E 00
 00000396  00				BYTE 0                                                                                    
 00000397  20 20 54 68 65		BYTE "  The bigger is the cluster and the hotter its color then more points will be", 0       
	   20 62 69 67 67
	   65 72 20 69 73
	   20 74 68 65 20
	   63 6C 75 73 74
	   65 72 20 61 6E
	   64 20 74 68 65
	   20 68 6F 74 74
	   65 72 20 69 74
	   73 20 63 6F 6C
	   6F 72 20 74 68
	   65 6E 20 6D 6F
	   72 65 20 70 6F
	   69 6E 74 73 20
	   77 69 6C 6C 20
	   62 65 00
 000003E5  20 20 72 65 63		BYTE "  received.", 0                                                                         
	   65 69 76 65 64
	   2E 00
 000003F1  00				BYTE 0                                                                                     
 000003F2  20 20 49 66 20		BYTE "  If you get tired of playing, press ESC to return to title screen.", 0                 
	   79 6F 75 20 67
	   65 74 20 74 69
	   72 65 64 20 6F
	   66 20 70 6C 61
	   79 69 6E 67 2C
	   20 70 72 65 73
	   73 20 45 53 43
	   20 74 6F 20 72
	   65 74 75 72 6E
	   20 74 6F 20 74
	   69 74 6C 65 20
	   73 63 72 65 65
	   6E 2E 00
 00000436  00				BYTE 0                                                                                    
 00000437  20 20 54 68 65		BYTE "  The level ends when the music stops!", 0                                              
	   20 6C 65 76 65
	   6C 20 65 6E 64
	   73 20 77 68 65
	   6E 20 74 68 65
	   20 6D 75 73 69
	   63 20 73 74 6F
	   70 73 21 00
 0000045E  00				BYTE 0                                                                                    
 0000045F  20 20 49 6E 20		BYTE "  In the title screen you need to choose a difficulty and press the number rela- ", 0   
	   74 68 65 20 74
	   69 74 6C 65 20
	   73 63 72 65 65
	   6E 20 79 6F 75
	   20 6E 65 65 64
	   20 74 6F 20 63
	   68 6F 6F 73 65
	   20 61 20 64 69
	   66 66 69 63 75
	   6C 74 79 20 61
	   6E 64 20 70 72
	   65 73 73 20 74
	   68 65 20 6E 75
	   6D 62 65 72 20
	   72 65 6C 61 2D
	   20 00
 000004B1  20 20 74 65 64		BYTE "  ted to your choise.", 0                                                               
	   20 74 6F 20 79
	   6F 75 72 20 63
	   68 6F 69 73 65
	   2E 00
 000004C7  00				BYTE 0                                                                                     
 000004C8  00				BYTE 0                                                                                    
 000004C9  20 20 20 20 20		BYTE "                                                Press RETURN to return...", 0           
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 50 72
	   65 73 73 20 52
	   45 54 55 52 4E
	   20 74 6F 20 72
	   65 74 75 72 6E
	   2E 2E 2E 00
 = 00000012			LQ_INSTRUCTIONS = 18        

 00000513 C9 CD BB DA C4	TXT_POINTS \                                                                                                       
	   BF DA BF DA DA
	   C4 BF C2 C4 BF
	   DA C4 BF DA C2
	   BF C2 20 C2 C2
	   20 20 DA C4 BF
	   DA C2 BF C2 DA
	   C4 BF DA BF DA
	   DA C4 BF 00
				BYTE 201,205,187,218,196,191,218,191,218,218,196,191,194,196,191,218,196,191,218,194,191,194," ",194,194," "," ",218,196,191,218,194,191,194,218,196,191,218,191,218,218,196,191, 0                     
 0000053F  BA 20 20 B3 20	BYTE 186," "," ",179," ",179,179,179,179,179," ",194,195,194,217,195,196,180," ",179," ",179," ",179,179," "," ",195,196,180," ",179," ",179,179," ",179,179,179,179,192,196,191, 0                    
	   B3 B3 B3 B3 B3
	   20 C2 C3 C2 D9
	   C3 C4 B4 20 B3
	   20 B3 20 B3 B3
	   20 20 C3 C4 B4
	   20 B3 20 B3 B3
	   20 B3 B3 B3 B3
	   C0 C4 BF 00
 0000056B  C8 CD BC C0 C4	BYTE 200,205,188,192,196,217,217,192,217,192,196,217,193,192,196,193," ",193," ",193," ",192,196,217,193,196,217,193," ",193," ",193," ",193,192,196,217,217,192,217,192,196,217, 0   
	   D9 D9 C0 D9 C0
	   C4 D9 C1 C0 C4
	   C1 20 C1 20 C1
	   20 C0 C4 D9 C1
	   C4 D9 C1 20 C1
	   20 C1 20 C1 C0
	   C4 D9 D9 C0 D9
	   C0 C4 D9 00
 = 00000003			LQ_POINTS = 3
				
 00000597 48 45 52 45 27	TXT_MEDAL \                                                                                       
	   53 20 41 20 4D
	   45 44 41 4C 20
	   46 4F 52 20 59
	   4F 55 3A 00
					BYTE "HERE'S A MEDAL FOR YOU:",0
 = 00000001			LQ_MEDAL = 1
				
 000005AF C9 CD BB C9 CD	TXT_REWARD_GOLD \
	   BB CB 20 20 C9
	   CB BB 00
					BYTE 201, 205, 187, 201, 205, 187, 203, "  ", 201, 203, 187, 0                                     
 000005BC  BA 20 CB BA 20		BYTE 186, " ", 203, 186, " ", 186, 186, "   ", 186, 186, 0                                     
	   BA BA 20 20 20
	   BA BA 00
 000005C9  C8 CD BC C8 CD		BYTE 200, 205, 188, 200, 205, 188, 202, 205, 188, 205, 202, 188, 0                                     
	   BC CA CD BC CD
	   CA BC 00
 = 00000003			LQ_REWARD_GOLD = 3                                                                                      
				                 
 000005D6 59 4F 55 20 47	TXT_PTS \				 
	   4F 54 20 00
					BYTE "YOU GOT ", 0  
 000005DF  20 50 54 53 2E		BYTE " PTS.", 0                                  
	   00
 = 00000002			LQ_PTS = 2                                                                                      
				             
 000005E5 57 41 4E 4E 41	TXT_FINISH \			 
	   20 54 52 59 20
	   41 47 41 49 4E
	   3F 00
					BYTE "WANNA TRY AGAIN?", 0                                                                    
 000005F6  20 50 72 65 73		BYTE " Press ESC to quit.", 0                                                                
	   73 20 45 53 43
	   20 74 6F 20 71
	   75 69 74 2E 00
 0000060A  20 50 72 65 73		BYTE " Press SPACE to replay.", 0                                                            
	   73 20 53 50 41
	   43 45 20 74 6F
	   20 72 65 70 6C
	   61 79 2E 00
 00000622  20 50 72 65 73		BYTE " Press RETURN to go back to title screen.", 0                                          
	   73 20 52 45 54
	   55 52 4E 20 74
	   6F 20 67 6F 20
	   62 61 63 6B 20
	   74 6F 20 74 69
	   74 6C 65 20 73
	   63 72 65 65 6E
	   2E 00
 = 00000004			LQ_FINISH = 4                                                                                      

				; BUFFERS
 0000064C 00000000		LAST_STEP DWORD ?
 00000650  00000019 [		VSYNC BYTE 25 DUP (90 DUP (?))
	    0000005A [
	     00
	    ]
	   ]
 00000F1A  00000058 [		BF_DEFAULT_FRAMED BYTE \
	    FE
	   ] 0D 0A
	   00000017 [
	    FE
	    00000056 [
	     20
	    ] FE 0D 0A
	   ]
	   00000058 [
	    FE
	   ] 00
					88 DUP (G_FRAME), 13, 10,
					23 DUP (G_FRAME, 86 DUP (" "), G_FRAME, 13, 10),
					88 DUP (G_FRAME), 0
 000017E3  00000019 [		BF_DEFAULT_EMPTY BYTE 25 DUP (88 DUP (" "), 13, 10), 0
	    00000058 [
	     20
	    ] 0D 0A
	   ] 00

 00000000			.code

 00000000			ClipText PROC USES eax ebx ecx edx, src: PTR BYTE, lines: DWORD, sx: DWORD, sy: DWORD
 00000000  55		   *	    push   ebp
 00000001  8B EC	   *	    mov    ebp, esp
 00000003  50		   *	    push   eax
 00000004  53		   *	    push   ebx
 00000005  51		   *	    push   ecx
 00000006  52		   *	    push   edx
 00000007  8B 5D 08			mov ebx, src
 0000000A  8B 4D 0C			mov ecx, lines

 0000000D  8B 55 14			mov edx, sy
 00000010  6B D2 5A			imul edx, edx, 90	
 00000013  03 55 10			add edx, sx
					;add edx, OUTPUT_BUFFER
 00000016  81 C2 00000650 R		add edx, offset VSYNC
 0000001C  52				push edx

 0000001D			ClipTextChar:
 0000001D  0F B6 03			movzx eax, BYTE PTR [ebx]
 00000020  83 C3 01			add ebx, 1
 00000023  84 C0			test al, al
 00000025  74 07			je ClipTextLine
 00000027  88 02			mov BYTE PTR [edx], al
 00000029  83 C2 01			add edx, 1
 0000002C  EB EF			jmp ClipTextChar

 0000002E			ClipTextLine:
 0000002E  5A				pop edx
 0000002F  83 C2 5A			add edx, 90
 00000032  52				push edx
 00000033  83 E9 01			sub ecx, 1
 00000036  83 F9 00			cmp ecx, 0
 00000039  74 02			je ClipTextFinish
 0000003B  EB E0			jmp ClipTextChar

 0000003D			ClipTextFinish:
					ret
 0000003D  5A		   *	    pop    edx
 0000003E  59		   *	    pop    ecx
 0000003F  5B		   *	    pop    ebx
 00000040  58		   *	    pop    eax
 00000041  C9		   *	    leave  
 00000042  C2 0010	   *	    ret    00010h
 00000045			ClipText ENDP

 00000045			WaitStep PROC USES eax ebx
 00000045  50		   *	    push   eax
 00000046  53		   *	    push   ebx
 00000047  BB 00000028			mov ebx, MAIN_TIME_STEP

					; Get elapsed time
 0000004C  E8 00000000 E		call GetMseconds
 00000051  2B 05 0000064C R		sub eax, LAST_STEP

					; Subtract elapsed time from default step
 00000057  2B D8			sub ebx, eax

					; If negative do not wait step
 00000059  0F BA E3 1F			bt ebx, 31
 0000005D  72 06			jc JumpSleep

					; Wait (default step - elapsed time)
					INVOKE Sleep, ebx
 0000005F  53		   *	    push   ebx
 00000060  E8 00000000 E   *	    call   Sleep

 00000065			JumpSleep:
					; Save current time to calculate elapsed later on
 00000065  E8 00000000 E		call GetMseconds
 0000006A  A3 0000064C R		mov LAST_STEP, eax

					ret
 0000006F  5B		   *	    pop    ebx
 00000070  58		   *	    pop    eax
 00000071  C3		   *	    ret    00000h
 00000072			WaitStep ENDP

 00000072			TitleScreen PROC
					INVOKE Str_copy,
						offset BF_DEFAULT_FRAMED,
						offset VSYNC
 00000072  68 00000650 R   *	    push   dword  ptr OFFSET FLAT: VSYNC
 00000077  68 00000F1A R   *	    push   dword  ptr OFFSET FLAT: BF_DEFAULT_FRAMED
 0000007C  E8 00000000 E   *	    call   Str_copy
					INVOKE ClipText, offset TXT_POINTS, LQ_POINTS, 16, 1
 00000081  6A 01	   *	    push   +000000001h
 00000083  6A 10	   *	    push   +000000010h
 00000085  6A 03	   *	    push   +000000003h
 00000087  68 00000513 R   *	    push   dword  ptr OFFSET FLAT: TXT_POINTS
 0000008C  E8 FFFFFF6F	   *	    call   ClipText
					INVOKE ClipText, offset TXT_TITLE_MIDDLE, LQ_TITLE_MIDDLE, 29, 9
 00000091  6A 09	   *	    push   +000000009h
 00000093  6A 1D	   *	    push   +00000001Dh
 00000095  6A 05	   *	    push   +000000005h
 00000097  68 000001B1 R   *	    push   dword  ptr OFFSET FLAT: TXT_TITLE_MIDDLE
 0000009C  E8 FFFFFF5F	   *	    call   ClipText
 000000A1  BA 00000650 R		mov edx, offset VSYNC
 000000A6  E8 00000000 E		call WriteString
					INVOKE WaitStep
 000000AB  E8 FFFFFF95	   *	    call   WaitStep

 000000B0  C3				ret
 000000B1			TitleScreen ENDP

 000000B1			main PROC
					; Starts frame-sync timer
 000000B1  E8 00000000 E		call GetMseconds
 000000B6  A3 0000064C R		mov LAST_STEP, eax

					; First screen
					INVOKE TitleScreen
 000000BB  E8 FFFFFFB2	   *	    call   TitleScreen

					; Bye
 000000C0  E8 00000000 E		call ReadChar
					exit
 000000C5  6A 00	   *	    push   +000000000h
 000000C7  E8 00000000 E   *	    call   ExitProcess
 000000CC			main ENDP

				END main
Microsoft (R) Macro Assembler Version 14.12.25830.2	    12/06/17 02:26:45
main.asm						     Symbols 2 - 1




Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPosition . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  dwMaximumWindowSize  . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
FOCUS_EVENT_RECORD . . . . . . .	 00000004
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
FPU_ENVIRON  . . . . . . . . . .	 0000001C
  controlWord  . . . . . . . . .	 00000000	 Word
  statusWord . . . . . . . . . .	 00000004	 Word
  tagWord  . . . . . . . . . . .	 00000008	 Word
  instrPointerOffset . . . . . .	 0000000C	 DWord
  instrPointerSelector . . . . .	 00000010	 DWord
  operandPointerOffset . . . . .	 00000014	 DWord
  operandPointerSelector . . . .	 00000018	 Word
INPUT_RECORD . . . . . . . . . .	 00000014
  EventType  . . . . . . . . . .	 00000000	 Word
  Event  . . . . . . . . . . . .	 00000004	 XmmWord
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCommandId  . . . . . . . . .	 00000000	 DWord
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
KEY_EVENT_RECORD . . . . . . . .	 00000010
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
MENU_EVENT_RECORD  . . . . . . .	 00000004
  dwCommandId  . . . . . . . . .	 00000000	 DWord
MOUSE_EVENT_RECORD . . . . . . .	 00000010
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word
WINDOW_BUFFER_SIZE_RECORD  . . .	 00000004
  dwSize . . . . . . . . . . . .	 00000000	 DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 000020AE Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 000000CC Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

ClipText . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 00000045 Public STDCALL
  src  . . . . . . . . . . . . .	DWord	 bp + 00000008
  lines  . . . . . . . . . . . .	DWord	 bp + 0000000C
  sx . . . . . . . . . . . . . .	DWord	 bp + 00000010
  sy . . . . . . . . . . . . . .	DWord	 bp + 00000014
  ClipTextChar . . . . . . . . .	L Near	 0000001D _TEXT	
  ClipTextLine . . . . . . . . .	L Near	 0000002E _TEXT	
  ClipTextFinish . . . . . . . .	L Near	 0000003D _TEXT	
CloseFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Clrscr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateOutputFile . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToDosDateTime  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToSystemTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FormatMessageA . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandTail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetFileTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMaxXY . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
LocalFree  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MessageBoxA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBoxAsk  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBox . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
OpenInputFile  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseDecimal32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseInteger32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadDec  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFloat  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFromFile . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKeyFlush . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKey  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ShowFPUStack . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StrLength  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
TitleScreen  . . . . . . . . . .	P Near	 00000072 _TEXT	Length= 0000003F Public STDCALL
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WaitStep . . . . . . . . . . . .	P Near	 00000045 _TEXT	Length= 0000002D Public STDCALL
  JumpSleep  . . . . . . . . . .	L Near	 00000065 _TEXT	
WriteBinB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFloat . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrameName  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrame  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteToFile  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteWindowsMsg  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
main . . . . . . . . . . . . . .	P Near	 000000B1 _TEXT	Length= 0000001B Public STDCALL
printf . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
scanf  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
wsprintfA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
ALT_MASK . . . . . . . . . . . .	Number	 00000003h   
BF_DEFAULT_EMPTY . . . . . . . .	Byte	 000017E3 _DATA	
BF_DEFAULT_FRAMED  . . . . . . .	Byte	 00000F1A _DATA	
BLOCKED_STEPS  . . . . . . . . .	Number	 0000000Ah   
B_ANY  . . . . . . . . . . . . .	Number	 00000006h   
B_BLUE . . . . . . . . . . . . .	Number	 00000002h   
B_GRAY . . . . . . . . . . . . .	Number	 00000000h   
B_GREEN  . . . . . . . . . . . .	Number	 00000003h   
B_PURPLE . . . . . . . . . . . .	Number	 00000001h   
B_RED  . . . . . . . . . . . . .	Number	 00000005h   
B_YELLOW . . . . . . . . . . . .	Number	 00000004h   
CAPSLOCK_ON  . . . . . . . . . .	Number	 00000080h   
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CTRL_MASK  . . . . . . . . . . .	Number	 0000000Ch   
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
ENHANCED_KEY . . . . . . . . . .	Number	 00000100h   
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
FORMAT_MESSAGE_ALLOCATE_BUFFER .	Number	 00000100h   
FORMAT_MESSAGE_FROM_SYSTEM . . .	Number	 00001000h   
FormatMessage  . . . . . . . . .	Text   	 FormatMessageA
GAME_LANES . . . . . . . . . . .	Byte	 00000021 _DATA	
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GLYPH_PLAYER_EMPTY . . . . . . .	Byte	 00000086 _DATA	
GLYPH_PLAYER . . . . . . . . . .	Byte	 00000081 _DATA	
G_FRAME  . . . . . . . . . . . .	Number	 000000FEh   
G_INV_EMPTY  . . . . . . . . . .	Number	 000000B0h   
G_INV_NODE . . . . . . . . . . .	Number	 000000DBh   
G_INV_SPLT . . . . . . . . . . .	Number	 000000AFh   
G_LANE_BORDER  . . . . . . . . .	Number	 000000CDh   
G_LANE_SPLT  . . . . . . . . . .	Number	 000000C4h   
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
HANDLE . . . . . . . . . . . . .	Text   	 DWORD
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
IDABORT  . . . . . . . . . . . .	Number	 00000003h   
IDCANCEL . . . . . . . . . . . .	Number	 00000002h   
IDCLOSE  . . . . . . . . . . . .	Number	 00000008h   
IDCONTINUE . . . . . . . . . . .	Number	 0000000Bh   
IDHELP . . . . . . . . . . . . .	Number	 00000009h   
IDIGNORE . . . . . . . . . . . .	Number	 00000005h   
IDNO . . . . . . . . . . . . . .	Number	 00000007h   
IDOK . . . . . . . . . . . . . .	Number	 00000001h   
IDRETRY  . . . . . . . . . . . .	Number	 00000004h   
IDTIMEOUT  . . . . . . . . . . .	Number	 00007D00h   
IDTRYAGAIN . . . . . . . . . . .	Number	 0000000Ah   
IDYES  . . . . . . . . . . . . .	Number	 00000006h   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
I_COLOR  . . . . . . . . . . . .	Number	 00000002h   
I_EMPTY  . . . . . . . . . . . .	Number	 00000000h   
I_REMOVING . . . . . . . . . . .	Number	 00000001h   
KBDOWN_FLAG  . . . . . . . . . .	Number	 00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
KEY_MASKS  . . . . . . . . . . .	Number	 0000001Fh   
LAST_STEP  . . . . . . . . . . .	DWord	 0000064C _DATA	
LEFT_ALT_PRESSED . . . . . . . .	Number	 00000002h   
LEFT_CTRL_PRESSED  . . . . . . .	Number	 00000008h   
LEN_B_COLORS . . . . . . . . . .	Number	 00000007h   
LEN_Q_LANES  . . . . . . . . . .	Number	 00000003h   
LEVEL_EASY . . . . . . . . . . .	Byte	 0000008B _DATA	
LEVEL_NORMAL . . . . . . . . . .	Byte	 0000008D _DATA	
LQ_AUTHORS . . . . . . . . . . .	Number	 00000003h   
LQ_FINISH  . . . . . . . . . . .	Number	 00000004h   
LQ_INSTRUCTIONS  . . . . . . . .	Number	 00000012h   
LQ_LOGO  . . . . . . . . . . . .	Number	 00000006h   
LQ_MEDAL . . . . . . . . . . . .	Number	 00000001h   
LQ_POINTS  . . . . . . . . . . .	Number	 00000003h   
LQ_PTS . . . . . . . . . . . . .	Number	 00000002h   
LQ_REWARD_GOLD . . . . . . . . .	Number	 00000003h   
LQ_TITLE_MIDDLE  . . . . . . . .	Number	 00000005h   
L_COLOR  . . . . . . . . . . . .	Number	 00000002h   
L_EMPTY  . . . . . . . . . . . .	Number	 00000000h   
L_EOG  . . . . . . . . . . . . .	Number	 00000001h   
MAIN_INSTRUCTIONS  . . . . . . .	Number	 000000FDh   
MAIN_PONCTUATION . . . . . . . .	Number	 000000FEh   
MAIN_Q_INDEX . . . . . . . . . .	Byte	 00000005 _DATA	
MAIN_Q_REPEAT_COUNTER  . . . . .	Byte	 00000006 _DATA	
MAIN_Q . . . . . . . . . . . . .	DWord	 00000001 _DATA	
MAIN_START . . . . . . . . . . .	Number	 000000FFh   
MAIN_TIME_STEP . . . . . . . . .	Number	 00000028h   
MAIN_TITLE . . . . . . . . . . .	Number	 000000FEh   
MB_ABORTRETRYIGNORE  . . . . . .	Number	 00000002h   
MB_APPLMODAL . . . . . . . . . .	Number	 00000000h   
MB_CANCELTRYCONTINUE . . . . . .	Number	 00000006h   
MB_DEFBUTTON1  . . . . . . . . .	Number	 00000000h   
MB_DEFBUTTON2  . . . . . . . . .	Number	 00000100h   
MB_DEFBUTTON3  . . . . . . . . .	Number	 00000200h   
MB_DEFBUTTON4  . . . . . . . . .	Number	 00000300h   
MB_HELP  . . . . . . . . . . . .	Number	 00004000h   
MB_ICONASTERISK  . . . . . . . .	Number	 00000040h   
MB_ICONERROR . . . . . . . . . .	Number	 00000010h   
MB_ICONEXCLAMATION . . . . . . .	Number	 00000030h   
MB_ICONHAND  . . . . . . . . . .	Number	 00000010h   
MB_ICONINFORMATION . . . . . . .	Number	 00000040h   
MB_ICONQUESTION  . . . . . . . .	Number	 00000020h   
MB_ICONSTOP  . . . . . . . . . .	Number	 00000010h   
MB_ICONWARNING . . . . . . . . .	Number	 00000030h   
MB_OKCANCEL  . . . . . . . . . .	Number	 00000001h   
MB_OK  . . . . . . . . . . . . .	Number	 00000000h   
MB_RETRYCANCEL . . . . . . . . .	Number	 00000005h   
MB_SYSTEMMODAL . . . . . . . . .	Number	 00001000h   
MB_TASKMODAL . . . . . . . . . .	Number	 00002000h   
MB_USERICON  . . . . . . . . . .	Number	 00000080h   
MB_YESNOCANCEL . . . . . . . . .	Number	 00000003h   
MB_YESNO . . . . . . . . . . . .	Number	 00000004h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
MessageBox . . . . . . . . . . .	Text   	 MessageBoxA
NULL . . . . . . . . . . . . . .	Number	 00000000h   
NUMLOCK_ON . . . . . . . . . . .	Number	 00000020h   
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
PLAYER_BLOCKED_X . . . . . . . .	Byte	 00000007 _DATA	
PLAYER_INVENTORY . . . . . . . .	Byte	 00000008 _DATA	
PLAYER_POINTS  . . . . . . . . .	DWord	 0000001D _DATA	
PLAYER_POS . . . . . . . . . . .	Byte	 00000000 _DATA	
P_BLUE . . . . . . . . . . . . .	Number	 00000014h   
P_GREEN  . . . . . . . . . . . .	Number	 0000001Eh   
P_PURPLE . . . . . . . . . . . .	Number	 0000000Ah   
P_RED  . . . . . . . . . . . . .	Number	 00000050h   
P_YELLOW . . . . . . . . . . . .	Number	 00000032h   
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
Q_BRICK  . . . . . . . . . . . .	Number	 00000000h   
Q_EOG  . . . . . . . . . . . . .	Number	 000000FFh   
Q_NEXT . . . . . . . . . . . . .	Number	 00000015h   
Q_REPEAT_X . . . . . . . . . . .	Number	 00000016h   
RIGHT_ALT_PRESSED  . . . . . . .	Number	 00000001h   
RIGHT_CTRL_PRESSED . . . . . . .	Number	 00000004h   
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
SCROLLLOCK_ON  . . . . . . . . .	Number	 00000040h   
SHIFT_MASK . . . . . . . . . . .	Number	 00000010h   
SHIFT_PRESSED  . . . . . . . . .	Number	 00000010h   
STD_ERROR_HANDLE . . . . . . . .	Number	 -0000000Ch   
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
TAB  . . . . . . . . . . . . . .	Number	 00000009h   
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
TXT_AUTHORS  . . . . . . . . . .	Byte	 0000022B _DATA	
TXT_FINISH . . . . . . . . . . .	Byte	 000005E5 _DATA	
TXT_INSTRUCTIONS . . . . . . . .	Byte	 000002F9 _DATA	
TXT_LOGO . . . . . . . . . . . .	Byte	 0000008F _DATA	
TXT_MEDAL  . . . . . . . . . . .	Byte	 00000597 _DATA	
TXT_POINTS . . . . . . . . . . .	Byte	 00000513 _DATA	
TXT_PTS  . . . . . . . . . . . .	Byte	 000005D6 _DATA	
TXT_REWARD_GOLD  . . . . . . . .	Byte	 000005AF _DATA	
TXT_TITLE_MIDDLE . . . . . . . .	Byte	 000001B1 _DATA	
VK_11  . . . . . . . . . . . . .	Number	 000000BDh   
VK_12  . . . . . . . . . . . . .	Number	 000000BBh   
VK_ADD . . . . . . . . . . . . .	Number	 0000006Bh   
VK_BACK  . . . . . . . . . . . .	Number	 00000008h   
VK_CANCEL  . . . . . . . . . . .	Number	 00000003h   
VK_CAPITAL . . . . . . . . . . .	Number	 00000014h   
VK_CLEAR . . . . . . . . . . . .	Number	 0000000Ch   
VK_CONTROL . . . . . . . . . . .	Number	 00000011h   
VK_DECIMAL . . . . . . . . . . .	Number	 0000006Eh   
VK_DELETE  . . . . . . . . . . .	Number	 0000002Eh   
VK_DIVIDE  . . . . . . . . . . .	Number	 0000006Fh   
VK_DOWN  . . . . . . . . . . . .	Number	 00000028h   
VK_END . . . . . . . . . . . . .	Number	 00000023h   
VK_ESCAPE  . . . . . . . . . . .	Number	 0000001Bh   
VK_EXECUTE . . . . . . . . . . .	Number	 0000002Bh   
VK_F10 . . . . . . . . . . . . .	Number	 00000079h   
VK_F11 . . . . . . . . . . . . .	Number	 0000007Ah   
VK_F12 . . . . . . . . . . . . .	Number	 0000007Bh   
VK_F13 . . . . . . . . . . . . .	Number	 0000007Ch   
VK_F14 . . . . . . . . . . . . .	Number	 0000007Dh   
VK_F15 . . . . . . . . . . . . .	Number	 0000007Eh   
VK_F16 . . . . . . . . . . . . .	Number	 0000007Fh   
VK_F17 . . . . . . . . . . . . .	Number	 00000080h   
VK_F18 . . . . . . . . . . . . .	Number	 00000081h   
VK_F19 . . . . . . . . . . . . .	Number	 00000082h   
VK_F1  . . . . . . . . . . . . .	Number	 00000070h   
VK_F20 . . . . . . . . . . . . .	Number	 00000083h   
VK_F21 . . . . . . . . . . . . .	Number	 00000084h   
VK_F22 . . . . . . . . . . . . .	Number	 00000085h   
VK_F23 . . . . . . . . . . . . .	Number	 00000086h   
VK_F24 . . . . . . . . . . . . .	Number	 00000087h   
VK_F2  . . . . . . . . . . . . .	Number	 00000071h   
VK_F3  . . . . . . . . . . . . .	Number	 00000072h   
VK_F4  . . . . . . . . . . . . .	Number	 00000073h   
VK_F5  . . . . . . . . . . . . .	Number	 00000074h   
VK_F6  . . . . . . . . . . . . .	Number	 00000075h   
VK_F7  . . . . . . . . . . . . .	Number	 00000076h   
VK_F8  . . . . . . . . . . . . .	Number	 00000077h   
VK_F9  . . . . . . . . . . . . .	Number	 00000078h   
VK_HELP  . . . . . . . . . . . .	Number	 0000002Fh   
VK_HOME  . . . . . . . . . . . .	Number	 00000024h   
VK_INSERT  . . . . . . . . . . .	Number	 0000002Dh   
VK_LBUTTON . . . . . . . . . . .	Number	 00000001h   
VK_LCONTROL  . . . . . . . . . .	Number	 000000A2h   
VK_LEFT  . . . . . . . . . . . .	Number	 00000025h   
VK_LMENU . . . . . . . . . . . .	Number	 000000A4h   
VK_LSHIFT  . . . . . . . . . . .	Number	 000000A0h   
VK_MENU  . . . . . . . . . . . .	Number	 00000012h   
VK_MULTIPLY  . . . . . . . . . .	Number	 0000006Ah   
VK_NEXT  . . . . . . . . . . . .	Number	 00000022h   
VK_NUMLOCK . . . . . . . . . . .	Number	 00000090h   
VK_NUMPAD0 . . . . . . . . . . .	Number	 00000060h   
VK_NUMPAD1 . . . . . . . . . . .	Number	 00000061h   
VK_NUMPAD2 . . . . . . . . . . .	Number	 00000062h   
VK_NUMPAD3 . . . . . . . . . . .	Number	 00000063h   
VK_NUMPAD4 . . . . . . . . . . .	Number	 00000064h   
VK_NUMPAD5 . . . . . . . . . . .	Number	 00000065h   
VK_NUMPAD6 . . . . . . . . . . .	Number	 00000066h   
VK_NUMPAD7 . . . . . . . . . . .	Number	 00000067h   
VK_NUMPAD8 . . . . . . . . . . .	Number	 00000068h   
VK_NUMPAD9 . . . . . . . . . . .	Number	 00000069h   
VK_PAUSE . . . . . . . . . . . .	Number	 00000013h   
VK_PRINT . . . . . . . . . . . .	Number	 0000002Ah   
VK_PRIOR . . . . . . . . . . . .	Number	 00000021h   
VK_RBUTTON . . . . . . . . . . .	Number	 00000002h   
VK_RCONTROL  . . . . . . . . . .	Number	 000000A3h   
VK_RETURN  . . . . . . . . . . .	Number	 0000000Dh   
VK_RIGHT . . . . . . . . . . . .	Number	 00000027h   
VK_RMENU . . . . . . . . . . . .	Number	 000000A5h   
VK_RSHIFT  . . . . . . . . . . .	Number	 000000A1h   
VK_SCROLL  . . . . . . . . . . .	Number	 00000091h   
VK_SEPARATER . . . . . . . . . .	Number	 0000006Ch   
VK_SHIFT . . . . . . . . . . . .	Number	 00000010h   
VK_SNAPSHOT  . . . . . . . . . .	Number	 0000002Ch   
VK_SPACE . . . . . . . . . . . .	Number	 00000020h   
VK_SUBTRACT  . . . . . . . . . .	Number	 0000006Dh   
VK_TAB . . . . . . . . . . . . .	Number	 00000009h   
VK_UP  . . . . . . . . . . . . .	Number	 00000026h   
VSYNC  . . . . . . . . . . . . .	Byte	 00000650 _DATA	
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
black  . . . . . . . . . . . . .	Number	 00000000h   
blue . . . . . . . . . . . . . .	Number	 00000001h   
brown  . . . . . . . . . . . . .	Number	 00000006h   
cyan . . . . . . . . . . . . . .	Number	 00000003h   
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
gray . . . . . . . . . . . . . .	Number	 00000008h   
green  . . . . . . . . . . . . .	Number	 00000002h   
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
magenta  . . . . . . . . . . . .	Number	 00000005h   
red  . . . . . . . . . . . . . .	Number	 00000004h   
white  . . . . . . . . . . . . .	Number	 0000000Fh   
wsprintf . . . . . . . . . . . .	Text   	 wsprintfA
yellow . . . . . . . . . . . . .	Number	 0000000Eh   

	   0 Warnings
	   0 Errors
