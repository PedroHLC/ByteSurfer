INCLUDE ..\Irvine32.inc

.data

; PONCUTATIONS
P_PURPLE = 10
P_BLUE = 20
P_GREEN = 30
P_YELLOW = 50
P_RED = 80

; ENUM: Bricks
B_GRAY = 0
B_PURPLE = 1
B_BLUE = 2
B_GREEN = 3
B_YELLOW = 4
B_RED = 5
B_ANY = 6

; Game Constants
LEN_Q_LANES = 3 ; QUANTIDADES DE LANES
LAST_Q_COLORS = Q_BRICK+B_ANY+1
MAIN_TIME_STEP = 10; OUR DELAY TIME BETWEEN STEPS
BLOCKED_STEPS = 10 ; STEPS THE PLAYER WILL BE BLOCKED WHEN OVERFLOWED

; Enum: QueueElem
Q_BRICK = 0 ; LANE * Brick
Q_NEXT = LEN_Q_LANES*LAST_Q_COLORS ; ADVANCE STEP
Q_REPEAT_X = Q_NEXT+1 ; CREATE X EMPTY STEPS
Q_EOG = 255 ; END OF LEVEL

; Enum: InventoryElem
I_EMPTY = 0
I_REMOVING = 1
I_COLOR = 2

; Enum: PerLaneQueueElem
L_EMPTY = 0
L_EOG = 1
L_COLOR = 2

; Enum: Scenes
MAIN_START = 255
MAIN_TITLE = 254
MAIN_INSTRUCTIONS = 253
MAIN_PONCTUATION = 254

; GAME STATES
PLAYER_POS BYTE MAIN_START ; WHICH LANE (0..LEN_Q_LANES) OR WHICH SCENE (MAIN_START..MAIN_PONCTUATION)
MAIN_Q DWORD offset LEVEL_EASY ; CURRENT LEVEL QUEUE
MAIN_Q_INDEX BYTE 0	; CURRENT LEVEL QUEUE POSITION/INDEX
MAIN_Q_REPEAT_COUNTER BYTE 0 ; EMPTY STEPS LEFT COUNTER
PLAYER_BLOCKED_X BYTE 0 ; HOW MANY STEPS PLAYER WILL CONTINUE BLOCKED
PLAYER_INVENTORY BYTE LEN_Q_LANES DUP (7 DUP (I_EMPTY)) ; IVENTORY ON EACH LANE
PLAYER_POINTS DWORD 0 ; PONCUTATION ACCUMULATOR
GAME_LANES BYTE LEN_Q_LANES DUP (32 DUP (L_EOG)) ; WHAT WE HAVE QUEUED ON EACH LANE

; GLYPHS
GLYPH_PLAYER BYTE 3 DUP (178),254,0
GLYPH_PLAYER_EMPTY BYTE 4 DUP (' '),0
G_INV_EMPTY = 176
G_INV_NODE = 219
G_INV_SPLT = 175
G_LANE_BORDER = 205
G_LANE_SPLT = 196

; LEVELS
LEVEL_EASY BYTE (0*B_GRAY),Q_NEXT,(1*B_BLUE),(2*B_GRAY),Q_NEXT,Q_REPEAT_X+20,Q_EOG
LEVEL_NORMAL BYTE (0*B_GRAY),Q_NEXT,(1*B_BLUE),(2*B_RED),Q_NEXT,Q_REPEAT_X+20,Q_EOG

.code
main PROC
	exit
main ENDP

END main